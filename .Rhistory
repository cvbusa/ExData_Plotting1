subset(df.fwf$V4, V4 <> NA)
subset(df.fwf, V4 == 23.4)
subset(df.fwf, V4 == "23.4)
)
)
subset(df.fwf, V4 == "23.3")
names(df.fwf)
df.fwf$V4
subset(df.fwf, V4 = "24.9")
subset(df.fwf, V4 = "24.9")$V4
subset(df.fwf, V4 == "24.9")$V4
df.fwf
df.fwf$V4
df.fwf$V4 = NA
df.fwf$V4
strURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
df.fwf <- read.fwf(strURL,c(10,9,4,9,4,9,4,9,4))
?read.fwf
df.fwf <- read.fwf(strURL,c(10,9,4,9,4,9,4,9,4), stringsAsFactors = F)
df.fwf$V4
df.fwf <- read.fwf(strURL,c(10,9,4,9,4,9,4,9,4), stringsAsFactors = F, na.strings = "NA")
df.fwf <- read.fwf(strURL,c(10,9,4,9,4,9,4,9,4), stringsAsFactors = F, na.strings = "NA")
df.fwf$V4
df.fwf$V4 <- as.doubles(df.fwf$V4)
df.fwf$V4 <- as.numeric(df.fwf$V4)
df.fwf$V4
df.fwf$V4 <- as.numeric(df.fwf$V4)
sum(df$V4, na.rm = T)
sum(df.fwf$V4, na.rm = T)
library(httr)
oauth_endpoints("github")
myapp  <- oauth_app("github", "85eb0eb7c8aab42649e1", "8852ed12a4622a0a307c689a9311bf711e73a681")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
df1 <- fromJSON("https://api.github.com/users/jtlek/repos")
library("jsonlite")
df1 <- fromJSON("https://api.github.com/users/jtlek/repos")
df1 <- fromJSON(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
df1 <- fromJSON(req)
req
head(req,5)
df1 <- fromJSON("https://api.github.com/users/jtlek/repos")
?fromJSONZ
?fromJSON
library(jsonlite)
library(httr)
df1 <- fromJSON("https://api.github.com/users/jtlek/repos")
client_id = "85eb0eb7c8aab42649e1"
client_secret = "8852ed12a4622a0a307c689a9311bf711e73a681"
# OAuth endpoints given in the GitHub API documentation
authorization_base_url = 'https://github.com/login/oauth/authorize'
token_url = 'https://github.com/login/oauth/access_token'
from requests_oauthlib import OAuth2Session
library(jsonlite)
library(httr)
oauth_endpoints("github")
myapp  <- oauth_app("github", "85eb0eb7c8aab42649e1", "8852ed12a4622a0a307c689a9311bf711e73a681")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
df1 <- fromJSON(req)
?content
content(req)
cat(content(r, "text"), "\n") # text content
cat(content(req, "text"), "\n") # text content
install.packages("rjson")
library("rjson")
df <- fromJSON(req)
df <- fromJSON(paste(readLines("req"), collapse=""))
req
?stop_for_status
y
library(httr)
oauth_endpoints("github")
myapp  <- oauth_app("github", "85eb0eb7c8aab42649e1", "8852ed12a4622a0a307c689a9311bf711e73a681")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
?GET()
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
df1 <- fromJSON(req)
library(httr)
oauth_endpoints("github")
myapp  <- oauth_app("github", "85eb0eb7c8aab42649e1", "8852ed12a4622a0a307c689a9311bf711e73a681")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req[[30]]
req[[30]][1]
req[[[30]][1]]
cat(content(req, "text"), "\n") # text content
library("jsonlite")
View(req)
m
ddf1 <- fromJSON("https://api.github.com/users/jtlek/repos")f1 <- fromJSON(req)
df <- fromJSON("https://api.github.com/users/jtlek/repos")
df1 <- fromJSON("https://api.github.com/users/jtleek/repos")
library("jsonlite")
#
df1 <- fromJSON("https://api.github.com/users/jtleek/repos")
library(httr)
oauth_endpoints("github")
myapp  <- oauth_app("github", "85eb0eb7c8aab42649e1", "8852ed12a4622a0a307c689a9311bf711e73a681")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
library("jsonlite")
df <- fromJSON("https://api.github.com/users/jtleek/repos")
library("jsonlite")
df <- fromJSON("https://api.github.com/users/jtleek/repos")
names("df")
df <- fromJSON("https://api.github.com/users/jtleek/repos")
classZ(df)
class(df)
names(df)
names(df)
subset(df, names == "datasharing")$created_at
subset(df, name == "datasharing")$created_at
subset(df, name == "datasharing")[,c("name","created_at")]
strURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
acs <- read.csv(strURL)
install.packages("sqldf"); library("sqldf")
install.packages("sqldf")
library("sqldf")
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
sort(unique(acs$AGEP))
sqldf("select distinct AGEP from acs")
sqldf("select distinct AGEP from acs order by AGEP")
strURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
library("XML")
doc <- htmlTreeParse(strURL,useInternal = TRUE)
# Question 5:
strURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
df.fwf <- read.fwf(strURL,c(10,9,4,9,4,9,4,9,4), stringsAsFactors = F)
df.fwf$V4 <- as.numeric(df.fwf$V4)
sum(df.fwf$V4)
sum(df.fwf$V4, na.rm = T)
strURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
library("XML")
doc <- htmlTreeParse(strURL,useInternal = TRUE)
View(doc)
cat(doc)
capture.output(doc)
capture.output(doc)[1:10]
capture.output(doc)[c(10,20,30,100)]
nchar(capture.output(doc)[c(10,20,30,100)])
?capture.output
nchar(capture.output(doc)[c(10,20,30,100)])
chars(capture.output(doc)[c(10,20,30,100)])
nchar(capture.output(doc)[c(10,20,30,100)], type = "chars")
nchar(capture.output(doc)[1:5])
capture.output(doc)[1:5]
doc.txt <- capture.output(doc)
doc.txt[1:5]
?sub
doc.txt <- capture.output(doc)
doc.txt[1:5]
sub("\\","",doc.txt)
sub("\","",doc.txt)
sub("\\","",doc.txt)
sub('\\',"",doc.txt)
sub('\\\\',"",doc.txt)
doc.txt[1:5]
sub('\',"",doc.txt)
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[1:5]
sub('\',"",doc.txt)
doc.txt[1:5]
nchar(capture.output(doc)[1:5])
doc.txt[1:5]
sub("\\\\","",doc.txt)
doc.txt[1:5]
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[1:5]
sub('\\\\',"",doc.txt)
sub('\\',"",doc.txt)
sub('\\\',"",doc.txt)
sub('\\\\',"",doc.txt)
sub('\\\\',"",doc.txt)[1:5]
sub('\\w',"",doc.txt)[1:5]
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[1:5]
doc.txt[length(doc.txt)]
nrow(doc.txt)
nrows(doc.txt)
length(doc.txt)
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[1:5]
end <- length(doc.txt)
doc.txt[end-5:end]
doc.txt[end-5:end +1]
doc.txt[end-5:end]
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[1:5]
doc.txt = gsub("([\\])","", doc.txt)
doc.txt[1:5]
doc.txt <- gsub("([\\])","", doc.txt)
doc.txt[1:5]
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[c(10,20,30,100)]
doc.txt <- gsub("([\\])","", doc.txt)
doc.txt[c(10,20,30,100)]
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[c(10,20,30,100)]
doc.txt <- gsub("\\t","", doc.txt)
doc.txt[c(10,20,30,100)]
?str_count
text <- c("\\t", "\\""")
text <- c("\\t", "\"")
text
text <- c("\t", "\"")
str_count(text,"\")
str_count(text,"\\")
?str_count
library()
str_count(fruit, c("a", "b", "p", "p")
)
library(stringr)
str_count(text,"\\")
library(stringr)
str_count(fruit, c("a", "b", "p", "p")
)
fruit <- c("apple", "banana", "pear", "pineapple")
str_count(fruit, "a")
text <- c("\t", "\"")
text
str_count(text,"\\")
str_count(text,"[\\]")
str_count(text,"[\]")
str_count(text,"[\\]")
str_count(text,"\\\\")
str_count(text,"\\")
str_count(text,"\\\")
str_count(text,"[\]")
text
str_count(text,'\\')
str_count(text,'\\\\')
str_count(text,'^\\')
str_count(text,"^\\")
str_count(text,"\\")
str_count(text,"$\\")
str_count(text,"\^\\")
str_count(text,"[\\]")
str_count(text,"[\\\\]")
str_count(text,"[\\\]")
str_count(text,"[\\\\]")
str_count(text,"'\\\\'")
str_count(text,"'\\'")
str_count(text,"'\'")
str_count(text,"'\\.'")
str_count(text,"\\.")
str_count(text,"\t")
str_count(text,"\.")
str_count(text,"\\t
str_count(text,"\\t")
str_count(text,"\\.")
str_count(text,"\\t")
text
text <- c("\t","\"")
text
str_count(text,"\\\"")
t1 <- nchar(doc.txt)[10]
(t2 <- str_count("\t",doc.txt[10]))
(t1 <- nchar(doc.txt)[10])
(t3 <- str_count("\\"",doc.txt[10]))
)
(t3 <- str_count("\\\"",doc.txt[10]))
(t1 <- nchar(doc.txt))
(t2 <- str_count("\t",doc.txt))
(t3 <- str_count("\\\"",doc.txt))
str_count(text,"\\\"")
(t1 <- nchar(doc.txt))
(t2 <- str_count(doc.txt,"\t"))
(t3 <- str_count(doc.txt,"\\\""))
tsum <- t1 + t2 + t3
tsum(c(10,20,30,100))
tsum <- t1 + t2 + t3
tsum
tsum[c(10,20,30,100)]
strURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
strURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
library("XML")
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[c(10,20,30,100)]
t1 <- nchar(doc.txt)
t2 <- str_count(doc.txt,"\t")
t3 <- str_count("\\\"",doc.txt)
t3 <- str_count(doc.txt,"\\\"")
t3 <- str_count("\\\"",doc.txt)
t3 <- str_count(doc.txt,"\\\"")
tsum <- t1 + t + t3
tsum <- t1 + t2 + t3
tsum[10,20,30,100]
doc.txt[c(10,20,30,100)]
tsum[c(10,20,30,100)]
strURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
library("XML")
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[c(10,20,30,100)]
strURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
library("XML")
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[c(10,20,30,100)]
t1 <- nchar(doc.txt)
t1[c(10,20,30,100)]
strURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
library("XML")
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[c(10,20,30,100)]
tChars <- nchar(doc.txt)
tChars[c(10,20,30,100)]
tTabs <- str_count(doc.txt,"\t")
tTabs[c(10,20,30,100)]
tBSlashes <- str_count(doc.txt,"\\\"")
tBSlashes[c(10,20,30,100)]
strURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
library("XML")
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[c(10,20,30,100)]
tChars <- nchar(doc.txt)
tChars[c(10,20,30,100)]
tBSTabs <- str_count(doc.txt,"\t")
tBSTabs[c(10,20,30,100)]
tBSParenthesis <- str_count(doc.txt,"\\\"")
tBSParenthesis[c(10,20,30,100)]
tNetChars <- tChar - tBSTabs - tBSParenthesis
tNetChars <- tChars - tBSTabs - tBSParenthesis
tNetChars[c(10,20,30,100)]
tNetChars
strURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
df.fwf <- read.fwf(strURL,c(10,9,4,9,4,9,4,9,4), stringsAsFactors = F)
df.fwf$V4 <- as.numeric(df.fwf$V4)
sum(df.fwf$V4, na.rm = T)
?htmlTreeParse
strURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
library("XML")
doc <- htmlParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[c(10,20,30,100)]
tChars <- nchar(doc.txt)
tChars[c(10,20,30,100)]
library(httr)
oauth_endpoints("github")
myapp  <- oauth_app("github", "85eb0eb7c8aab42649e1", "8852ed12a4622a0a307c689a9311bf711e73a681")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
#
library("jsonlite")
df <- fromJSON("https://api.github.com/users/jtleek/repos")
names(df)
subset(df, name == "datasharing")[,c("name","created_at")]
strURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
acs <- read.csv(strURL)
install.packages("sqldf")
install.packages("sqldf")
library("sqldf")
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
sort(unique(acs$AGEP))
sqldf("select distinct AGEP from acs")
sqldf("select distinct AGEP from acs order by AGEP")
strURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
library("XML")
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[c(10,20,30,100)]
tChars <- nchar(doc.txt)
tChars[c(10,20,30,100)]
####
strURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
library("XML")
doc <- htmlParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[c(10,20,30,100)]
tChars <- nchar(doc.txt)
tChars[c(10,20,30,100)]
strURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
df.fwf <- read.fwf(strURL,c(10,9,4,9,4,9,4,9,4), stringsAsFactors = F)
df.fwf$V4 <- as.numeric(df.fwf$V4)
sum(df.fwf$V4, na.rm = T)
strURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
library("XML")
doc <- htmlTreeParse(strURL,useInternal = TRUE)
doc.txt <- capture.output(doc)
doc.txt[c(10,20,30,100)]
tChars <- nchar(doc.txt)
tChars[c(10,20,30,100)]
tChars
sort(tChars)
rm(list =c(ls()))
save.image()
getwd()
strURL <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
strFilename <-"./GDP.csv"
download.file(strURL,destfile=strFilename, mode="wb")
dfGDP <- read.csv(strFilename)
#
strURL <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
strFilename <-"./Country.csv"
download.file(strURL,destfile=strFilename, mode="wb")
dfCountry <- read.csv(strFilename)
View(dfGDP)
names()
names(dfGDP
)
names(dfGDP) <- c("Code","Rank","X.1","Economy","GDPDollars","X.4","X.5","X.6","X.7","X.8")
names(dfGDP)
names(dfGDP)[5]
names(dfGDP)[5] <- c("UsDollars")
names(dfGDP)
dfGDP$Rank <-as.numeric(as.character(dfGDP$Rank))
dfGDP$Rank
dfGDP[is.na(dfGDP$Rank),c(1,2,3,4)]
dfGDP[!is.na(dfGDP$Rank),c(1,2,3,4)]
dfGDPRank <-dfGDP[!is.na(dfGDP$Rank),]
View(dfGDPRank)
dfGDPRank(order(dfGDPRank$Rank, decreasing= TRUE), c(1,2,4,5)]
dfGDPRank[order(dfGDPRank$Rank, decreasing= TRUE), c(1,2,4,5)]
dfGDPDescSortRank <-dfGDPRank[order(dfGDPRank$Rank, decreasing= TRUE), c(1,2,4,5)]
dfGDPsort <-dfGDPRank[order(dfGDPRank$Rank, decreasing= TRUE), c(1,2,4,5)]
names(dfGPsort)
names(dfGDPsort)
names(dfGDPsort)[4] <- "USDollars"
names(dfGDPsort)
names(dfCountry)
dfGDPmerge <-merge(dfGDPsort,dfCountry,by.x="Rank",by.y="CountryCode",all=False)
dfGDPmerge <-merge(dfGDPsort,dfCountry,by.x="Code",by.y="CountryCode",all=False)
args(merge)
?merge
dfGDPmerge <-merge(dfGDPsort,dfCountry,by.x="Code",by.y="CountryCode",all=F)
View(dfGDPmerge)
dfGDPmerge <-dfGDPmerge[order(dfGDPmerge$Rank,decreasing=T),]
View(dfGDPmerge)
names(dfGDPmerge)
rm(list=(ls()))
source('~/RProgramming/ExData_Plotting1/plot1.R', echo=TRUE)
source('~/RProgramming/ExData_Plotting1/plot2.R', echo=TRUE)
source('~/RProgramming/ExData_Plotting1/plot3.R', echo=TRUE)
source('~/RProgramming/ExData_Plotting1/plot4.R', echo=TRUE)
source('~/RProgramming/ExData_Plotting1/plot4.R', echo=TRUE)
subDirData <-file.path(getwd(),"data")
subDirFigure <-file.path(getwd(),"figure")
if(!file.exists(subDirData)) {dir.create(path = subDirData, showWarnings = FALSE)}
if(!file.exists(subDirFigure)) {dir.create(path = subDirFigure, showWarnings = FALSE)}
strURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
strFile <- file.path(subDirData,"power.zip")
if(!file.exists(strFile)) {download.file(url = strURL, destfile = strFile, mode = "wb")}
files <-unzip(zipfile = strFile, list = T)
unzip(zipfile = strFile, exdir = subDirData)
pwd
getwd()
setwd("C:/Users/Charles/Documents\RProgramming\ExData_Plotting1")
setwd("C:/Users/Charles/Documents/RProgramming/ExData_Plotting1")
subDirData <-file.path(getwd(),"data")
subDirFigure <-file.path(getwd(),"figure")
if(!file.exists(subDirData)) {dir.create(path = subDirData, showWarnings = FALSE)}
if(!file.exists(subDirFigure)) {dir.create(path = subDirFigure, showWarnings = FALSE)}
strURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
strFile <- file.path(subDirData,"power.zip")
if(!file.exists(strFile)) {download.file(url = strURL, destfile = strFile, mode = "wb")}
files <-unzip(zipfile = strFile, list = T)
unzip(zipfile = strFile, exdir = subDirData)
strFiles1st <-file.path(subDirData,files[1])
# read all of strFiles1st in to data frame
dfPower <- read.table(file = strFiles1st, header = T, sep = ";", stringsAsFactors = F)
head(dfPower)
head(dfPower)
dim(dfPower)
#
dfPower$DateTime <-strptime(x = paste(dfPower$Date,dfPower$Time), format = "%d/%m/%Y %H:%M:%S")
dim(dfPower)
str(dfPower)
#
dfPowerPlot <-dfPower[grep(pattern = "^[12]/2/2007", x = dfPower$Date, value = F),]
dim(dfPowerPlot)
head(dfPowerPlot)
str(dfPowerPlot)
dfPowerPlot$Global_active_power <-as.numeric(dfPowerPlot$Global_active_power)
str(dfPowerPlot)
createPlot <-function() {
par(mfrow=c(1,1))
# plot 1 - active power histogram
hist(x = dfPowerPlot$Global_active_power, xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "Red")
}
# send plot to screen
createPlot()
# save plot to png
strPathPng <-file.path(subDirFigure,"plot1.png")
png(strPathPng, width=480, height=480)
createPlot()
dev.off()
